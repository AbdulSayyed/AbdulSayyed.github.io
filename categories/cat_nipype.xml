<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sayyed's blog (A python way Neuroimaging Analysis)</title><link>https://AbdulSayyed.github.io/</link><description>
        &lt;p&gt;&lt;h5&gt;A python package for neuro imaging analysis&lt;h5&gt;&lt;/p&gt;
        &lt;p&gt;Learning analysis in python language using `nipype` &lt;/p&gt;
         
         &lt;center&gt;
        &lt;hr&gt;
        </description><atom:link href="https://AbdulSayyed.github.io/categories/cat_nipype.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:neuro.sayyed@gmail.com"&gt;Abdul Sayyed&lt;/a&gt; </copyright><lastBuildDate>Sun, 02 Aug 2020 21:25:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>nipype-workflow</title><link>https://AbdulSayyed.github.io/posts/neuroscience/nipype-workflow/</link><dc:creator>Abdul Sayyed</dc:creator><description>&lt;div&gt;&lt;h3&gt;My setup of nipype&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I have successfully created a conda environment for &lt;code&gt;nipype&lt;/code&gt;. it is located here (/home/sayyed/anaconda3/envs/nipype).&lt;/li&gt;
&lt;li&gt;The directory I have chosen to work is &lt;code&gt;/home/sayyed/neuro-science/projects/nikola&lt;/code&gt; the listing is given as below.&lt;/li&gt;
&lt;li&gt;Since this package works with all existing neuroimaging software, it is recomended that it is installed on a machine where all other software can be installed and configured properly to work with &lt;code&gt;nipype&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once it is installed using &lt;code&gt;conda install --channel conda-forge nipype&lt;/code&gt;. Its &lt;code&gt;.yml&lt;/code&gt; file can be created using &lt;code&gt;conda list --explicit &amp;gt; nipype.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Though the list is long but it does not install &lt;code&gt;ipython&lt;/code&gt; or say a kernel so theat we can workwith jupyterlab. If ipython is installed , one can start the interactive shell and start working from terminal or command prompt. In reality &lt;code&gt;ipython&lt;/code&gt; is not necessary as &lt;code&gt;nipype&lt;/code&gt; install &lt;code&gt;python&lt;/code&gt; packeage to srat with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipython&lt;/code&gt; is  only necessary if you decide to work with &lt;code&gt;Jupyter&lt;/code&gt;. It is same as python that is an interpreter but works interactively with Jupyter environment and hence knows as Python execusiton background in Jupyter environment. &lt;/li&gt;
&lt;li&gt;Having said that &lt;code&gt;ipykernel&lt;/code&gt; can still be installed in nipype environment using &lt;code&gt;conda istall ipykernel&lt;/code&gt;. This will also install &lt;code&gt;jupyter_cliend, core and other necessary packages. Once installed, ipython can be started from terminal and the availablity of&lt;/code&gt;nipype&lt;code&gt;package can be checked using&lt;/code&gt;import nipype as ny&lt;code&gt;and&lt;/code&gt;ny.get_info()`.&lt;/li&gt;
&lt;li&gt;To check the proper installtion when the command was run it produced an error that &lt;code&gt;pytest&lt;/code&gt; is not instlled use pip to install. So I did then ran a test.&lt;/li&gt;
&lt;li&gt;When installation was tested using given instructions, it complained about the &lt;code&gt;Sphinix extension documenter not found&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Furthermore, when example was started I encountered an error saying &lt;code&gt;nilearn&lt;/code&gt; is not installed so I installed it as well.&lt;/li&gt;
&lt;li&gt;today on 24 July 2020, I again encountered some problems so I read the instructions again and found that I need to install &lt;code&gt;scikit-learning&lt;/code&gt; as well. So I installed it using &lt;code&gt;conda -install scikit-learning&lt;/code&gt;. Aslo checked &lt;code&gt;nilearn&lt;/code&gt; again and install it using &lt;code&gt;conda install nilearn&lt;/code&gt; and one package was installed. It happened with &lt;code&gt;nilearn&lt;/code&gt; as well all other dependencies were installed only this one was left.&lt;/li&gt;
&lt;li&gt;To download data nipype uses a pyton module called &lt;code&gt;datalad&lt;/code&gt;, use &lt;code&gt;pip install datalad&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When working in notebook, I frequently encountered a problem with traversing the file path.&lt;/li&gt;
&lt;li&gt;So I open the evironment in spyder but it says you need to install sypder kernel in your evnironment. so I did using &lt;code&gt;pip install spyder-kernel&lt;/code&gt;. Then use `python -c "import sys; print(sys.executable)"&lt;/li&gt;
&lt;li&gt;Once done you can open spyder from base environment and then using &lt;code&gt;Preferences -&amp;gt; Python Interpreter -&amp;gt; select the python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;While starting to work with given examples again encounter a problem so I ran a test &lt;code&gt;nipype.test()&lt;/code&gt; and it said &lt;code&gt;VTK&lt;/code&gt; was no found and nipype.interface WARNING: tvtk wasn't found&lt;code&gt;, upgrade&lt;/code&gt;DIPY` verson.&lt;/li&gt;
&lt;li&gt;Tried to upgrade and found that it is not installed so I installed using &lt;code&gt;conda install DIPY&lt;/code&gt;. Then got thewarning &lt;code&gt;Nipype 1 wrokflows have been moved to the niflow-nipype1-wrokflows padkage.&lt;/code&gt; &lt;code&gt;pip install niflow-nipype1-wrokflows&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Got error about &lt;code&gt;sphinix&lt;/code&gt; installed &lt;code&gt;conda intall sphinx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Still getting an error about &lt;code&gt;sphinxcontrib napoleon&lt;/code&gt;, using &lt;code&gt;pip install sphinxcontrib-anpoleon&lt;/code&gt; though it said requirment already installed and instlled `pockets, shpinxcontrib-anpoleaon.&lt;/li&gt;
&lt;li&gt;And finally &lt;code&gt;import nipype; nipype.test()&lt;/code&gt; scucceded to run, it took 10 minutes or more to run and utilize all 8 processors, all memory and Gpu 3d up to 54%.&lt;/li&gt;
&lt;li&gt;In the end one error I recieved and it was about workflow.&lt;/li&gt;
&lt;li&gt;Today I ran another test using the following as mentioned in dcoument:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import the nipype module&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt;

&lt;span class="c1"&gt;# Optional: Use the following lines to increase verbosity of output&lt;/span&gt;

&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logging'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'workflow_level'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CRITICAL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logging'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'interface_level'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CRITICAL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Run the test: Increase verbosity parameter for more info&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doctests&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No this tiem I get this erro: ERROR: usage: ipykernel_launcher.py [options] [file_or_dir] [file_or_dir] [...]
ipykernel_launcher.py: error: unrecognized arguments: --doctest-modules
  inifile: /home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/pytest.ini
  rootdir: /home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This time again using &lt;code&gt;conda install doctest&lt;/code&gt; installed a new packgage called &lt;code&gt;doctest-2.4.0....&lt;/code&gt; but the test did not suceeded.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nikola&lt;/span&gt; &lt;span class="n"&gt;ll&lt;/span&gt;                                                                                                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;
&lt;span class="n"&gt;drwxrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="n"&gt;demosite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;drwxrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="n"&gt;Ex_01&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt;  &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moudle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;drwxrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="n"&gt;mysite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;lrwxrwxrwx&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt;   &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;nik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vscode&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;./.&lt;/span&gt;&lt;span class="n"&gt;vscode&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nikola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="n"&gt;sayyed&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="n"&gt;requirement&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nikola&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;demosite&lt;/code&gt; I do not need and it will be deleted.&lt;/li&gt;
&lt;li&gt;Mysite directory is the main directory of nikola blog.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;vsocde workspace&lt;/code&gt; is saved in &lt;code&gt;.vscode&lt;/code&gt; folder and pointed by &lt;code&gt;nik-nip-vscode&lt;/code&gt; link ( it is uselss at this moment)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;How &lt;code&gt;notebook&lt;/code&gt; differs when created in &lt;code&gt;nikola&lt;/code&gt; or in &lt;code&gt;jupyterlab&lt;/code&gt;?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Notebook can be created in many ways. But when nikola does its scanning it throws an error if it does not find the meta data it requires for a notebook  to be a part of the nikola.&lt;/li&gt;
&lt;li&gt;It does not matter where it can be created from, the meta data can be easily added. Inorder for nikola to open and work with notebook, it has to have some meta data inside it. It is not a rocket science as I had gread difficulty dealing with notebook when trying to open them with pelican or embed them in markdown file. Though I have not been successful to embed notebooks in markdown files using short code as described by nikola docuemtation.&lt;/li&gt;
&lt;li&gt;Follwing is a meta data entries when the file is created by jupter lab selecting particular ipython kernel. Ipython kernil is just a python interpreter name that you have created in your conda or pip environment and given it a uniqure name. For exampe when I created &lt;code&gt;nipype&lt;/code&gt; environment I installed different version of differnt software that can work together. This version is knows as your particular python kernel or interpreter.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;"metadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"kernelspec"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s2"&gt;"display_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Python (nipype)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# This is added when you choose you particular python kernel&lt;/span&gt;
   &lt;span class="s2"&gt;"language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nipype"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;"language_info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s2"&gt;"codemirror_mode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ipython"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="s2"&gt;"file_extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;".py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"mimetype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"text/x-python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"nbconvert_exporter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"pygments_lexer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ipython3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"3.8.2"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;The above detail is enough for jupyter to open the file but not for nikola needs to know more to deal with correct theme and template to open notebook data. Follwing information is needed and can simply be added into the above meta data.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;"nikola"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Abdul Sayyed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nipype"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2020-07-10 15:43:54 UTC+01:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"001_intro"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"python, jupyter, nipype"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"001_intro"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"text"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;h4&gt;How to create a notebook with vscode.&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Using command pattlet we can use &lt;code&gt;&amp;gt; create notebook&lt;/code&gt; command. There are other worth exploring as of importing as well.&lt;/li&gt;
&lt;li&gt;Running notebook in vscode and setting it properly can be handy. The scroll bar shows, wchic environmen is selected. If the wrong one is selected, by clicking on the status bar on the infromation it will open different environment where the right one can be opened. Once the right one is opened. The notebook already have installed module such as &lt;code&gt;numpy, matplot or nipype&lt;/code&gt; exposed api avilable to use.&lt;/li&gt;
&lt;li&gt;On the right hand top corner, vscode also shows the local server and the right kernel selected.&lt;/li&gt;
&lt;li&gt;It is very handy that in my one &lt;code&gt;notebook&lt;/code&gt; folder created in &lt;code&gt;nikola&lt;/code&gt; top level directories, I can have different notebooks set and ready to be used with different environments.&lt;/li&gt;
&lt;li&gt;They can all be opened from one place and knows which environment they are to be used as in their meta contents this information is saved.&lt;/li&gt;
&lt;li&gt;If not the right kernel can be opened from the right corner.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Running code from different kernels&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It is possible to run code from different kernel or executional environment in one note book.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%%bash&lt;/code&gt; or &lt;code&gt;%%HTML&lt;/code&gt; or &lt;code&gt;%%&lt;/code&gt; and run the particular command to execute it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;How this repo is committed&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Since I am using nikola, whatever I do I keep the work under &lt;code&gt;mysite&lt;/code&gt; folder so that it is also published as well.&lt;/li&gt;
&lt;li&gt;I always work in dev branch. To publish my site , I switched to &lt;code&gt;src&lt;/code&gt; by using &lt;code&gt;git checkout src&lt;/code&gt; from here I use &lt;code&gt;nikola github_deploy&lt;/code&gt;. This takes care of eveything and only deploy the output folder and whatever is necessary to produce a websit.&lt;/li&gt;
&lt;li&gt;I also wanted to be able to use my repo with windows so I cloned it to my windwos environment but realised that it does not have any contents, it is only a publish html file repo. No markdown contents.&lt;/li&gt;
&lt;li&gt;To resolve this issue I had to create a new repo which I named &lt;code&gt;https://github.com/AbdulSayyed/nikola-website&lt;/code&gt; and added a remote in my local &lt;code&gt;dev&lt;/code&gt; branch where I usually work from.&lt;/li&gt;
&lt;li&gt;To add a new remote to a same repo I used this command &lt;code&gt;git remote add niksrc https://github.com/AbdulSayyed/nikola-website.git&lt;/code&gt; as shown below. Now I have my dev branch set to a remote repo name &lt;code&gt;nikola-website.git&lt;/code&gt;. This branch is added or referenced in my config file as &lt;code&gt;niksrc&lt;/code&gt;. To pus or pull I would use &lt;code&gt;git push niksrc dev&lt;/code&gt; or &lt;code&gt;git pull niksrc dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;  &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;niksrc&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/nikola-website.git                      (nikola) 12:59:21&lt;/span&gt;
&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;  &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;                                                                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nikola&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;
&lt;span class="n"&gt;niksrc&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/nikola-website.git (fetch)&lt;/span&gt;
&lt;span class="n"&gt;niksrc&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/nikola-website.git (push)&lt;/span&gt;
&lt;span class="n"&gt;origin&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/AbdulSayyed.github.io.git (fetch)&lt;/span&gt;
&lt;span class="n"&gt;origin&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/AbdulSayyed.github.io.git (push)&lt;/span&gt;
&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;  &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;                                                                                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nikola&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;
&lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;working&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;  &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;niksrc&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;                                                                       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nikola&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com': Abdulsayyed&lt;/span&gt;
&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//Abdulsayyed@github.com': &lt;/span&gt;
&lt;span class="n"&gt;Enumerating&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;259.39&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;7.63&lt;/span&gt; &lt;span class="n"&gt;MiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Resolving&lt;/span&gt; &lt;span class="nl"&gt;deltas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/nikola-website.git&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="n"&gt;Branch&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;niksrc&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;◦&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;                                                                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nikola&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;
&lt;span class="n"&gt;niksrc&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/nikola-website.git (fetch)&lt;/span&gt;
&lt;span class="n"&gt;niksrc&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/nikola-website.git (push)&lt;/span&gt;
&lt;span class="n"&gt;origin&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/AbdulSayyed.github.io.git (fetch)&lt;/span&gt;
&lt;span class="n"&gt;origin&lt;/span&gt;  &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/AbdulSayyed/AbdulSayyed.github.io.git (push)&lt;/span&gt;
&lt;span class="err"&gt;⋊&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;◦&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;The reason it was done because I was having difficulty with shared folder with VBox and Ubuntu 20.04. As there are some material, especially some images that I wanted to use with nikola site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Though I have started working from both machine, I need to understand that I can only work or update the contents from one machine, push it to the remote. And then when starting to work again in another machine I need to pull a repo and started woking with it. I can not start to wrok in both machine with the same repo as it would created confilicts and I will loose my work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Problems faced with working nipype.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It has been a week I have not been able to solve the issue with an error I recieved, it comes when this package tries to read the bids file. It does not give any error when reading but it doe when I use &lt;code&gt;BET&lt;/code&gt; and tries to output.&lt;/li&gt;
&lt;li&gt;I can not run nipype on windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When looking at the examples of nipype I found a new term &lt;code&gt;BET&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As I have not worked with &lt;a href="https://AbdulSayyed.github.io/files/WhyNhow_FSL_final-WEB.pdf"&gt;&lt;code&gt;FSL&lt;/code&gt;&lt;/a&gt; software but here is an overview of &lt;code&gt;FSL&lt;/code&gt; software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tools used in FSL:[Taken from FSL oxford]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fMRI:&lt;code&gt;FEAT, MELODIC,FABBER, BASIL,VERBENA&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;sMRI: &lt;code&gt;BET,FAST,FIRST,FLIRT, FNIRT, FSLVBM,SIENA, DIENAX,fsl_anat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;dMRI: &lt;code&gt;FDT,TBSS, eddy,topup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GLM/ Stats:.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other tools: &lt;code&gt;FSLView, Fslutils,Atlases, Atlasquery, etc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BET&lt;/code&gt; or Brain Extaction Tool is uses to delete non-brain tissu from an image of the whle head. It is used to estimate the inner and outer cell surfaces and outer scapl surface out of T1 and T2 images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://AbdulSayyed.github.io/posts/neuroscience/nipype-workflow/</guid><pubDate>Tue, 21 Jul 2020 17:24:13 GMT</pubDate></item><item><title>Nipype introduction</title><link>https://AbdulSayyed.github.io/notebooks/001-intro/</link><dc:creator>Abdul Sayyed</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Starting-with-nipype"&gt;Starting with &lt;a href="https://nipy.org/packages/nipype/index.html"&gt;&lt;strong&gt;nipype&lt;/strong&gt;&lt;/a&gt;&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#Starting-with-nipype"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Nipype&lt;/code&gt; probably pronouncec as &lt;code&gt;nipee..yipee&lt;/code&gt; is an abbreviation for &lt;strong&gt;Neuroimaging in Python pipleline and interfaces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It is a Toolbox for anylysing data coming from neuroimaging modalaties. It is written in Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Check your installation&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="Beginners-Guide"&gt;Beginners Guide&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#Beginners-Guide"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;It is year &lt;a href="https://miykael.github.io/nipype-beginner-s-guide/"&gt;2017 guide&lt;/a&gt;, it can be tested and re written for others&lt;/li&gt;
&lt;li&gt;The main purpose of this toolbox is to provide an easy way to build a workflow termed as a pipleline, to facilitate the existing technologies used in neuroimaging analyis. All popular technololgies such as &lt;code&gt;SPM, FreeSurfer, FSL etc&lt;/code&gt;can be used.&lt;/li&gt;
&lt;li&gt;It allows to combine these techonolgies in an specifed workflow, it is what you decided to use which technology for which prupose.&lt;/li&gt;
&lt;li&gt;For example&lt;/li&gt;
&lt;li&gt;The whole idea is to provide an environment where reasearch can be reproduced with the same data by sharing with others.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="Nipype-architechture:"&gt;Nipype architechture:&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#Nipype-architechture:"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It consist of many components, important ones are &lt;code&gt;interfaces&lt;/code&gt;,&lt;code&gt;Workflow Engines&lt;/code&gt; and &lt;code&gt;Execution Plugins&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Interfaces&lt;/strong&gt; are the python programs (scripts) that are used to interface with existing technologies like &lt;code&gt;MATLAB,AFNI,ANTs etc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Workflow Engine&lt;/strong&gt; is a part that deals with the complexities involve in executing diferent task by gluing eachother. It uses following terms interchanably.&lt;ul&gt;
&lt;li&gt;Node:An interface needs the information about the technologies it is dealing with and it is given in the form of node. A node describes these information.&lt;/li&gt;
&lt;li&gt;MapNode:It is similar to node and takes multiple inputs of same type. For example 10 patient of same  data analysis is performed on them. &lt;/li&gt;
&lt;li&gt;Wordflow:It is graph a kind of directed acyclic graph or forest of grapsh that describes the dataflow interms of its Nodes, MapNodes or Workflows it self.&lt;/li&gt;
&lt;li&gt;Execution Plugins: They descirbe how to execute your workfow in a physical machine by leaverging the power of differnet cores.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="A-conventional-way-of-neuro-imaging"&gt;A conventional way of neuro imaging&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#A-conventional-way-of-neuro-imaging"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Acqusation of MRI data: you need to know how it is taken what varibales and terms are used. Which series of MRI is uses commonly known as modalaties. There are many like ( DTI, fMRI etc).&lt;/li&gt;
&lt;li&gt;The format of resulted images: Different scanners uses different formats e.g. &lt;code&gt;DICOM , PAR or REC&lt;/code&gt;. To analyse these images they are to be converted into different format so that un necessary details can be removed. Initially data is kept in &lt;code&gt;K-space&lt;/code&gt; and converted into different space. Mostly the format used is either &lt;code&gt;nifti&lt;/code&gt; and now recetnly is &lt;code&gt;gifti&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Design of the experiment: Which kind of experimental design is used what parameters to take into accunt etc.&lt;/li&gt;
&lt;li&gt;Preprocessing of data:&lt;ul&gt;
&lt;li&gt;Slice Timing Correction (fMRI images needes to be correcyted )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="The-below-is-taken-verbatim-from-nipype-Micheal-tutorial."&gt;The below is taken verbatim from nipype Micheal tutorial.&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#The-below-is-taken-verbatim-from-nipype-Micheal-tutorial."&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Because functional MRI measurement sequences don’t acquire every slice in a volume at the same time we have to account for the time differences among the slices. For example, if you acquire a volume with 37 slices in ascending order, and each slice is acquired every 50ms, there is a difference of 1.8s between the first and the last slice acquired. You must know the order in which the slices were acquired to be able to apply the proper correction. Slices are typically acquired in one of three methods: descending order (top-down); ascending order (bottom-up); or interleaved (acquire every other slice in each direction), where the interleaving may start at the top or the bottom. (Left: ascending, Right: interleaved)&lt;/p&gt;
&lt;p&gt;Slice Timing Correction is used to compensate for the time differences between the slice acquisitions by temporally interpolating the slices so that the resulting volume is close to equivalent to acquiring the whole brain image at a single time point. This temporal factor of acquisition especially has to be accounted for in fMRI models where timing is an important factor (e.g. for event related designs, where the type of stimulus changes from volume to volume).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;blockquote&gt;&lt;p&gt;Chec If nipype is working use &lt;code&gt;import nipype&lt;/code&gt; or &lt;code&gt;import nipype&lt;/code&gt;. Run the cell if gets error it means it is not working otherwise it is present.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;ul&gt;
&lt;li&gt;Thouth the module has been imported successfully but it does not have any attribute or any function &lt;code&gt;help()&lt;/code&gt; it thorws an error. 
The above command succeeded, it means it is working. we have nipype on our path. To see where it is loaded from use &lt;code&gt;shift + tab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Getting-ready-for-dataset"&gt;Getting ready for dataset&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#Getting-ready-for-dataset"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Make a directory &lt;code&gt;data&lt;/code&gt; in current folder that is underneate your &lt;code&gt;notebook&lt;/code&gt; folder. Then using &lt;code&gt;datalad&lt;/code&gt; install dataset. Note the cell is used to execute &lt;code&gt;bash&lt;/code&gt; programe, here it is refered as &lt;code&gt;bash&lt;/code&gt; kernel. Other kernels can be used as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%%bash
mkdir -p data
&lt;span class="nb"&gt;cd&lt;/span&gt; data
datalad install -r ///workshops/nih-2017/ds000114
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;install(ok): /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114 (dataset)
install(ok): /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/fmriprep (dataset)
install(ok): /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/freesurfer (dataset)
action summary:
  install (ok: 3)
[INFO] Cloning dataset to &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114&amp;gt; 
[INFO] Attempting to clone from http://datasets.datalad.org/workshops/nih-2017/ds000114 to /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114 
[INFO] Attempting to clone from http://datasets.datalad.org/workshops/nih-2017/ds000114/.git to /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114 
[INFO] Completed clone attempts for &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114&amp;gt; 
[INFO] access to 1 dataset sibling datalad not auto-enabled, enable with:
| 		datalad siblings -d "/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114" enable -s datalad 
[INFO] Installing &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114&amp;gt; underneath /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114 recursively 
[INFO] Cloning dataset to &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/fmriprep&amp;gt; 
[INFO] Attempting to clone from http://datasets.datalad.org/workshops/nih-2017/ds000114/derivatives/fmriprep/.git to /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/fmriprep 
[INFO] Completed clone attempts for &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/fmriprep&amp;gt; 
[INFO] Cloning dataset to &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/freesurfer&amp;gt; 
[INFO] Attempting to clone from http://datasets.datalad.org/workshops/nih-2017/ds000114/derivatives/freesurfer/.git to /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/freesurfer 
[INFO] Completed clone attempts for &amp;lt;Dataset path=/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/derivatives/freesurfer&amp;gt; 
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;ul&gt;
&lt;li&gt;Looking into the dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ds000114&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;CHANGES                   &lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-08&lt;/span&gt;/
dataset_description.json  &lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-09&lt;/span&gt;/
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;derivatives&lt;/span&gt;/              &lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-10&lt;/span&gt;/
&lt;span class="ansi-cyan-intense-fg ansi-bold"&gt;dwi.bval&lt;/span&gt;@                 task-covertverbgeneration_bold.json
&lt;span class="ansi-cyan-intense-fg ansi-bold"&gt;dwi.bvec&lt;/span&gt;@                 task-covertverbgeneration_events.tsv
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-01&lt;/span&gt;/                   task-fingerfootlips_bold.json
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-02&lt;/span&gt;/                   task-fingerfootlips_events.tsv
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-03&lt;/span&gt;/                   task-linebisection_bold.json
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-04&lt;/span&gt;/                   task-overtverbgeneration_bold.json
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-05&lt;/span&gt;/                   task-overtverbgeneration_events.tsv
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-06&lt;/span&gt;/                   task-overtwordrepetition_bold.json
&lt;span class="ansi-blue-intense-fg ansi-bold"&gt;sub-07&lt;/span&gt;/                   task-overtwordrepetition_events.tsv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [34]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We have one anatomical image in every folder. Lets make sure it is there.&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;ls data/ds000114/sub-01/ses-test/anat/
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;sub-01_ses-test_T1w.nii.gz
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Using-BET-from-fsl-that-we-imorted-in-first-step."&gt;Using BET from fsl that we imorted in first step.&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#Using-BET-from-fsl-that-we-imorted-in-first-step."&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MapNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nipype.interfaces.fsl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IsotropicSmooth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ApplyMask&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nilearn.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_anat&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nipype.testing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;  &lt;span class="n"&gt;example_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# reading file in a variable&lt;/span&gt;
&lt;span class="n"&gt;working_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;working_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/data"&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;input_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/ds000114/sub-01/ses-test/anat/sub-01_ses-test_T1w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./sub-01_ses-test_T1w.nii.gz"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data
/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/sub-01/ses-test/anat/sub-01_ses-test_T1w
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BET&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;
&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"T1.nii.gz"&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;TraitError&lt;/span&gt;                                Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-19-8f66ff4bee62&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      1&lt;/span&gt; bet &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; BET&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 2&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;bet&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;inputs&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;in_file &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; input_file
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      3&lt;/span&gt; bet&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;inputs&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;out_file &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;"T1.nii.gz"&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      4&lt;/span&gt; res &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; bet&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;run&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/interfaces/base/traits_extension.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, objekt, name, value, return_pathlike)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    328&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; objekt&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; value&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; return_pathlike&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;False&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    329&lt;/span&gt;         &lt;span class="ansi-blue-fg"&gt;"""Validate a value change."""&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 330&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;value &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; super&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;File&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;objekt&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; value&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; return_pathlike&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;True&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    331&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_exts&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    332&lt;/span&gt;             fname &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; value&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;name

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/interfaces/base/traits_extension.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, objekt, name, value, return_pathlike)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    133&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;exists&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    134&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;not&lt;/span&gt; value&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;exists&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 135&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;                 &lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;error&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;objekt&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; str&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;value&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    136&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    137&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_is_file &lt;span class="ansi-green-fg"&gt;and&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;not&lt;/span&gt; value&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;is_file&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/traits/base_trait_handler.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;error&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, object, name, value)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     72&lt;/span&gt;             The proposed new value &lt;span class="ansi-green-fg"&gt;for&lt;/span&gt; the attribute&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     73&lt;/span&gt;         """
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 74&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         raise TraitError(
&lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     75&lt;/span&gt;             object&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;full_info&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;object&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; value&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; value
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     76&lt;/span&gt;         )

&lt;span class="ansi-red-fg"&gt;TraitError&lt;/span&gt;: The 'in_file' trait of a BETInputSpec instance must be a pathlike object or string representing an existing file, but a value of '/home/sayyed/neuro-science/projects/nikola/mysite/notebooks/data/ds000114/sub-01/ses-test/anat/sub-01_ses-test_T1w' &amp;lt;class 'str'&amp;gt; was specified.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Start-working-with-nipype"&gt;Start working with nipype&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001-intro/#Start-working-with-nipype"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Importing few things&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;relpath&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MapNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nipype.interfaces.fsl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IsotropicSmooth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ApplyMask&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nilearn.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_anat&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# will use a T1w from ds000114 dataset&lt;/span&gt;
&lt;span class="n"&gt;input_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/data/ds000114/sub-01/ses-test/anat/sub-01_ses-test_T1w.nii.gz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BET&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"data/sample-nifiti-file.nii"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;
&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;NameError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-5-125541a3dc72&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      1&lt;/span&gt; bet &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; BET&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      2&lt;/span&gt; bet&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;inputs&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;in_file &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; abspath&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;"data/sample-nifiti-file.nii"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 3&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;bet&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;imputs&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;int_file&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; input_file
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      4&lt;/span&gt; help&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;bet&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;inputs&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;NameError&lt;/span&gt;: name 'input_file' is not defined&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sample_bet.nii.gz"&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[17]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;
inskull_mask_file = &amp;lt;undefined&amp;gt;
inskull_mesh_file = &amp;lt;undefined&amp;gt;
mask_file = &amp;lt;undefined&amp;gt;
meshfile = &amp;lt;undefined&amp;gt;
out_file = /home/sayyed/neuro-science/projects/nikola/mysite/notebooks/sample_bet.nii.gz
outline_file = &amp;lt;undefined&amp;gt;
outskin_mask_file = &amp;lt;undefined&amp;gt;
outskin_mesh_file = &amp;lt;undefined&amp;gt;
outskull_mask_file = &amp;lt;undefined&amp;gt;
outskull_mesh_file = &amp;lt;undefined&amp;gt;
skull_file = &amp;lt;undefined&amp;gt;
skull_mask_file = &amp;lt;undefined&amp;gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plot_anat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sample_bet.nii.gz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="n"&gt;display_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ortho'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;draw_cross&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;



&lt;div class="output_svg output_subarea "&gt;
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;

&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height="201.6pt" version="1.1" viewbox="0 0 489.6 201.6" width="489.6pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
 &lt;defs&gt;
  &lt;style type="text/css"&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
 &lt;/defs&gt;
 &lt;g id="figure_1"&gt;
  &lt;g id="patch_1"&gt;
   &lt;path d="M 0 201.6 
L 489.6 201.6 
L 489.6 0 
L 0 0 
z
"&gt;&lt;/path&gt;
  &lt;/g&gt;
  &lt;g id="axes_1"&gt;
   &lt;g clip-path="url(#pd0a81a6aed)"&gt;
    &lt;image height="188" id="image1a7bf2a922" transform="scale(1 -1)translate(0 -188)" width="476" x="7.2" xlink:href="data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAAdwAAAC8CAYAAADSIB8bAAAABHNCSVQICAgIfAhkiAAAAvdJREFUeJzt1TEBwCAQwMAH/55bFYSBOwXZsmbmGwDgqH07AABeYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACBguAAQMFwAChgsAAcMFgIDhAkDAcAEgYLgAEDBcAAgYLgAEDBcAAoYLAAHDBYCA4QJAwHABIGC4ABAwXAAIGC4ABAwXAAKGCwABwwWAgOECQMBwASBguAAQMFwACPznOgJ30Tzm6QAAAABJRU5ErkJggg==" y="-6.4"&gt;&lt;/image&gt;
   &lt;/g&gt;
  &lt;/g&gt;
  &lt;g id="axes_2"&gt;
   &lt;g clip-path="url(#p9b678a4387)"&gt;
    &lt;image height="188" id="imagef608f2af20" transform="scale(1 -1)translate(0 -188)" width="127" x="12" xlink:href="data:image/png;base64,
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" y="-6.6"&gt;&lt;/image&gt;
   &lt;/g&gt;
  &lt;/g&gt;
  &lt;g id="axes_3"&gt;
   &lt;g clip-path="url(#pbf34651bde)"&gt;
    &lt;image height="188" id="image09db15cb02" transform="scale(1 -1)translate(0 -188)" width="188" x="151" xlink:href="data:image/png;base64,
" y="-6.6"&gt;&lt;/image&gt;
   &lt;/g&gt;
  &lt;/g&gt;
  &lt;g id="axes_4"&gt;
   &lt;g clip-path="url(#p3f82a6c23b)"&gt;
    &lt;image height="188" id="imagea77c3f61cb" transform="scale(1 -1)translate(0 -188)" width="127" x="351" xlink:href="data:image/png;base64,
" y="-6.6"&gt;&lt;/image&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;defs&gt;
  &lt;clippath id="pd0a81a6aed"&gt;
   &lt;rect height="187.2" width="475.2" x="7.2" y="7.2"&gt;&lt;/rect&gt;
  &lt;/clippath&gt;
  &lt;clippath id="p9b678a4387"&gt;
   &lt;rect height="187.2" width="126.113362" x="12.333379" y="7.2"&gt;&lt;/rect&gt;
  &lt;/clippath&gt;
  &lt;clippath id="pbf34651bde"&gt;
   &lt;rect height="187.2" width="187.2" x="151.2" y="7.2"&gt;&lt;/rect&gt;
  &lt;/clippath&gt;
  &lt;clippath id="p3f82a6c23b"&gt;
   &lt;rect height="187.2" width="126.113362" x="351.153258" y="7.2"&gt;&lt;/rect&gt;
  &lt;/clippath&gt;
 &lt;/defs&gt;
&lt;/svg&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://AbdulSayyed.github.io/notebooks/001-intro/</guid><pubDate>Sat, 18 Jul 2020 17:06:24 GMT</pubDate></item><item><title>002_basics</title><link>https://AbdulSayyed.github.io/notebooks/002_basics/</link><dc:creator>Abdul Sayyed</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Python-basics-needed-to-do-neuro-imaginag"&gt;Python basics needed to do neuro imaginag&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/002_basics/#Python-basics-needed-to-do-neuro-imaginag"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://AbdulSayyed.github.io/notebooks/002_basics/</guid><pubDate>Fri, 10 Jul 2020 15:45:20 GMT</pubDate></item><item><title>001_intro</title><link>https://AbdulSayyed.github.io/notebooks/001_intro/</link><dc:creator>Abdul Sayyed</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Jupyter-note-book-basics"&gt;Jupyter note book basics&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001_intro/#Jupyter-note-book-basics"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;posix
/home/sayyed/neuro-science/projects/nikola/mysite/notebooks
['002_intro.ipynb', '001_intro.ipynb', '002_basics.ipynb', '.ipynb_checkpoints', '005_intro.ipynb', '003_intro.ipynb', '004_intro.ipynb']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;NameError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-1-c09f0e0ad088&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;npm&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;install&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;NameError&lt;/span&gt;: name 'npm' is not defined&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Running-code-from-different-kernel"&gt;Running code from different kernel&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/001_intro/#Running-code-from-different-kernel"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%%bash
which bash
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;/usr/bin/bash
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%HTML&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is html 4 heading &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea "&gt;
&lt;h5&gt;This is html 4 heading &lt;/h5&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>jupyter</category><category>nipype</category><category>python</category><guid>https://AbdulSayyed.github.io/notebooks/001_intro/</guid><pubDate>Fri, 10 Jul 2020 14:43:54 GMT</pubDate></item><item><title>Checking-nipype-Installation</title><link>https://AbdulSayyed.github.io/notebooks/002-nipype/</link><dc:creator>Abdul Sayyed</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Checking-nipype-installation"&gt;Checking &lt;code&gt;nipype&lt;/code&gt; installation&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/002-nipype/#Checking-nipype-installation"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;ol&gt;
&lt;li&gt;There are number of ways to check its installation as shown below.&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;1.5.0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;ModuleNotFoundError&lt;/span&gt;                       Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, doctests, parallel)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     36&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;try&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 37&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; pytest
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     38&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;except&lt;/span&gt; ImportError&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;ModuleNotFoundError&lt;/span&gt;: No module named 'pytest'

During handling of the above exception, another exception occurred:

&lt;span class="ansi-red-fg"&gt;RuntimeError&lt;/span&gt;                              Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-1-bac8365228b1&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; nipype&lt;span class="ansi-blue-fg"&gt;;&lt;/span&gt; nipype&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;test&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, doctests, parallel)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     37&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; pytest
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     38&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;except&lt;/span&gt; ImportError&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 39&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;raise&lt;/span&gt; RuntimeError&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;"py.test not installed, run: pip install pytest"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     40&lt;/span&gt;         args &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;[&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;]&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     41&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;not&lt;/span&gt; doctests&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;RuntimeError&lt;/span&gt;: py.test not installed, run: pip install pytest&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;ul&gt;
&lt;li&gt;The above simply says that &lt;code&gt;pytest&lt;/code&gt; is not installed and using the &lt;code&gt;pip&lt;/code&gt; install it.&lt;/li&gt;
&lt;li&gt;Installed &lt;code&gt;pytest&lt;/code&gt; using &lt;code&gt;pip install pytest&lt;/code&gt; and run the text again. When test is run it gives the following error.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docs: &lt;a href="https://docs.pytest.org/en/latest/warnings.html"&gt;https://docs.pytest.org/en/latest/warnings.html&lt;/a&gt;
======================================================== short test summary info =========================================================
ERROR ../../../../anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/documenter.py - ModuleNotFoundError: No module nam...
ERROR ../../../../anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/apidoc/&lt;strong&gt;init&lt;/strong&gt;.py - ModuleNotFoundError: No modul...
ERROR ../../../../anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/apidoc/docstring.py - ModuleNotFoundError: No modu...
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 3 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
===================================================== 9 warnings, 3 errors in 57.98s =====================================================&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The error above is related to the &lt;code&gt;Sphinix&lt;/code&gt; package which comes with nipype. We wil see it later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ny&lt;/span&gt;
&lt;span class="n"&gt;ny&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'pkg_path': '/home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype',
 'commit_source': 'archive substitution',
 'commit_hash': '%h',
 'nipype_version': '1.5.0',
 'sys_version': '3.8.2 | packaged by conda-forge | (default, Apr 24 2020, 08:20:52) \n[GCC 7.3.0]',
 'sys_executable': '/home/sayyed/anaconda3/envs/nipype/bin/python',
 'sys_platform': 'linux',
 'numpy_version': '1.18.5',
 'scipy_version': '1.5.0',
 'networkx_version': '2.4',
 'nibabel_version': '3.1.1',
 'traits_version': '6.1.0'}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Testing-the-installation"&gt;Testing the installation&lt;a class="anchor-link" href="https://AbdulSayyed.github.io/notebooks/002-nipype/#Testing-the-installation"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;ModuleNotFoundError&lt;/span&gt;                       Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, doctests, parallel)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     36&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;try&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 37&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; pytest
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     38&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;except&lt;/span&gt; ImportError&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;ModuleNotFoundError&lt;/span&gt;: No module named 'pytest'

During handling of the above exception, another exception occurred:

&lt;span class="ansi-red-fg"&gt;RuntimeError&lt;/span&gt;                              Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-3-bac8365228b1&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; nipype&lt;span class="ansi-blue-fg"&gt;;&lt;/span&gt; nipype&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;test&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, doctests, parallel)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     37&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; pytest
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     38&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;except&lt;/span&gt; ImportError&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 39&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;raise&lt;/span&gt; RuntimeError&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;"py.test not installed, run: pip install pytest"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     40&lt;/span&gt;         args &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;[&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;]&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     41&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;not&lt;/span&gt; doctests&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;RuntimeError&lt;/span&gt;: py.test not installed, run: pip install pytest&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;filed&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Sphinix&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;tried&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;nilearn&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;threw&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;finding&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;============================= test session starts ==============================
platform linux -- Python 3.8.2, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype, inifile: pytest.ini
collected 2885 items / 2 errors / 2883 selected

==================================== ERRORS ====================================
________________ ERROR collecting sphinxext/apidoc/__init__.py _________________
/home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/apidoc/__init__.py:5: in &amp;lt;module&amp;gt;
    from sphinxcontrib.napoleon import (
E   ModuleNotFoundError: No module named 'sphinxcontrib.napoleon'
________________ ERROR collecting sphinxext/apidoc/docstring.py ________________
/home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
/home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/apidoc/__init__.py:5: in &amp;lt;module&amp;gt;
    from sphinxcontrib.napoleon import (
E   ModuleNotFoundError: No module named 'sphinxcontrib.napoleon'
=========================== short test summary info ============================
ERROR ../../../../../anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/apidoc/__init__.py
ERROR ../../../../../anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/sphinxext/apidoc/docstring.py
!!!!!!!!!!!!!!!!!!! Interrupted: 2 errors during collection !!!!!!!!!!!!!!!!!!!!
============================== 2 errors in 17.92s ==============================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;FileNotFoundError&lt;/span&gt;                         Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-4-bac8365228b1&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;import&lt;/span&gt; nipype&lt;span class="ansi-blue-fg"&gt;;&lt;/span&gt; nipype&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;test&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, doctests, parallel)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     48&lt;/span&gt;             args&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;append&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;"-n auto"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     49&lt;/span&gt;         args&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;append&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;os&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;path&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;dirname&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;__file__&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 50&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;pytest&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;main&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;args&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;args&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     51&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     52&lt;/span&gt; 

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/_pytest/config/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;main&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(args, plugins)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    122&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;else&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    123&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;try&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 124&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;                 ret = config.hook.pytest_cmdline_main(
&lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    125&lt;/span&gt;                     config&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;config
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    126&lt;/span&gt;                 )  # type: Union[ExitCode, int]

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/pluggy/hooks.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, *args, **kwargs)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    284&lt;/span&gt;                     stacklevel&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-cyan-fg"&gt;2&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    285&lt;/span&gt;                 )
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 286&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;return&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_hookexec&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;get_hookimpls&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; kwargs&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    287&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    288&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; call_historic&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; result_callback&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; kwargs&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; proc&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/pluggy/manager.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_hookexec&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, hook, methods, kwargs)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     91&lt;/span&gt;         &lt;span class="ansi-red-fg"&gt;# called from all hookcaller instances.&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     92&lt;/span&gt;         &lt;span class="ansi-red-fg"&gt;# enable_tracing will set its own wrapping function at self._inner_hookexec&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 93&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;return&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_inner_hookexec&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;hook&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; methods&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; kwargs&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     94&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     95&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; register&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; plugin&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/pluggy/manager.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;lambda&amp;gt;&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(hook, methods, kwargs)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     82&lt;/span&gt;             )
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     83&lt;/span&gt;         self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_implprefix &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; implprefix
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 84&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
&lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     85&lt;/span&gt;             methods&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     86&lt;/span&gt;             kwargs&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt;

    &lt;span class="ansi-red-fg"&gt;[... skipping hidden 3 frame]&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/_pytest/main.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;pytest_cmdline_main&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(config)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    238&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    239&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; pytest_cmdline_main&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;config&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 240&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;     &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;return&lt;/span&gt; wrap_session&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;config&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; _main&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    241&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    242&lt;/span&gt; 

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/_pytest/main.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;wrap_session&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(config, doit)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    233&lt;/span&gt;                     session&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;exitstatus &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; exc&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;returncode
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    234&lt;/span&gt;                 sys&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;stderr&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;write&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;"{}: {}\n"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;format&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;type&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;exc&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;__name__&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; exc&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 235&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;config&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_ensure_unconfigure&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    236&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;return&lt;/span&gt; session&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;exitstatus
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    237&lt;/span&gt; 

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/_pytest/config/__init__.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_ensure_unconfigure&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    823&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_configured&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    824&lt;/span&gt;             self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_configured &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;False&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 825&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;hook&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;pytest_unconfigure&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;config&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    826&lt;/span&gt;             self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;hook&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;pytest_configure&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_call_history &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;[&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;]&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    827&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;while&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_cleanup&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/pluggy/hooks.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;__call__&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, *args, **kwargs)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    284&lt;/span&gt;                     stacklevel&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-cyan-fg"&gt;2&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    285&lt;/span&gt;                 )
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 286&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;return&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_hookexec&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;get_hookimpls&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; kwargs&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    287&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    288&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; call_historic&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; result_callback&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; kwargs&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; proc&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/pluggy/manager.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_hookexec&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, hook, methods, kwargs)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     91&lt;/span&gt;         &lt;span class="ansi-red-fg"&gt;# called from all hookcaller instances.&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     92&lt;/span&gt;         &lt;span class="ansi-red-fg"&gt;# enable_tracing will set its own wrapping function at self._inner_hookexec&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 93&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;&lt;span class="ansi-green-fg"&gt;return&lt;/span&gt; self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_inner_hookexec&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;hook&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; methods&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; kwargs&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     94&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     95&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; register&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; plugin&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; name&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/pluggy/manager.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;lambda&amp;gt;&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(hook, methods, kwargs)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     82&lt;/span&gt;             )
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     83&lt;/span&gt;         self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_implprefix &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; implprefix
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 84&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
&lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     85&lt;/span&gt;             methods&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     86&lt;/span&gt;             kwargs&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt;

    &lt;span class="ansi-red-fg"&gt;[... skipping hidden 3 frame]&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/conftest.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;pytest_unconfigure&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(config)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     42&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; pytest_unconfigure&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;config&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;     43&lt;/span&gt;     &lt;span class="ansi-red-fg"&gt;# Delete temp folder after session is finished&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;---&amp;gt; 44&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;     &lt;/span&gt;shutil&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;rmtree&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;temp_folder&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/shutil.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;rmtree&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(path, ignore_errors, onerror)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    704&lt;/span&gt;             orig_st &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; os&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;lstat&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;path&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    705&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;except&lt;/span&gt; Exception&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 706&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;onerror&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;os&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;lstat&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; path&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; sys&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;exc_info&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    707&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;return&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    708&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;try&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;~/anaconda3/envs/nipype/lib/python3.8/shutil.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;rmtree&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(path, ignore_errors, onerror)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    702&lt;/span&gt;         &lt;span class="ansi-red-fg"&gt;# lstat()/open()/fstat() trick.&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    703&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;try&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 704&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;orig_st &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; os&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;lstat&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;path&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    705&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;except&lt;/span&gt; Exception&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    706&lt;/span&gt;             onerror&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;os&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;lstat&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; path&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; sys&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;exc_info&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;FileNotFoundError&lt;/span&gt;: [Errno 2] No such file or directory: '/tmp/tmpqoloi4y8'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Import the nipype module&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nipype&lt;/span&gt;
&lt;span class="c1"&gt;# Optional: Use the following lines to increase verbosity of output&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logging'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'workflow_level'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CRITICAL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logging'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'interface_level'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CRITICAL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Run the test: Increase verbosity parameter for more info&lt;/span&gt;
&lt;span class="n"&gt;nipype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stderr output_text"&gt;
&lt;pre&gt;ERROR: usage: ipykernel_launcher.py [options] [file_or_dir] [file_or_dir] [...]
ipykernel_launcher.py: error: unrecognized arguments: --doctest-modules
  inifile: /home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype/pytest.ini
  rootdir: /home/sayyed/anaconda3/envs/nipype/lib/python3.8/site-packages/nipype

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>jupyter</category><category>nipype</category><category>python</category><guid>https://AbdulSayyed.github.io/notebooks/002-nipype/</guid><pubDate>Fri, 10 Jul 2020 14:43:54 GMT</pubDate></item></channel></rss>